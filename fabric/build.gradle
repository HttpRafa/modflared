import com.google.gson.Gson
import com.google.gson.JsonArray
import com.google.gson.JsonElement
import com.google.gson.JsonObject

import java.nio.file.Files

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

def replacements = [
        "version": project.version,
        "minecraft_version": project.mod_minecraft_version,
        "fabric_loader_version": project.fabric_loader_version
]

processResources {
    inputs.properties(replacements)

    filesMatching("fabric.mod.json") {
        expand replacements
    }
}

// Configure the modrinth publication
modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "${mod_project_id}"
    versionNumber = "${version}+${minecraft_version}"
    versionName = "${version} for ${minecraft_version}"
    versionType = "${mod_version_type}"
    changelog = generateChangelog()
    uploadFile = remapJar
    gameVersions = ["${minecraft_version}"]

    syncBodyFrom = rootProject.file("README.md").text;
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

// Credits: https://github.com/RelativityMC/VMP-fabric
static String generateChangelog() {
    final String path = System.getenv("GITHUB_EVENT_RAW_PATH");
    if (path == null || path.isBlank()) return "No changelog was specified. ";
    final JsonObject jsonObject = new Gson().fromJson(Files.readString(java.nio.file.Path.of(path)), JsonObject.class);

    StringBuilder builder = new StringBuilder();
    builder.append("This version is uploaded automatically by GitHub Actions.  \n\n")
            .append("Changelog:  \n");
    final JsonArray commits = jsonObject.getAsJsonArray("commits");
    if (commits.isEmpty()) {
        builder.append("No changes detected. \n");
    } else {
        for (JsonElement commit : commits) {
            JsonObject object = commit.getAsJsonObject();
            builder.append("- ");
            builder.append('[').append(object.get("id").getAsString(), 0, 8).append(']').append('(').append(object.get("url").getAsString()).append(')');
            builder.append(' ');
            builder.append(object.get("message").getAsString().split("\n")[0]);
            builder.append(" - ");
            builder.append(object.get("author").getAsJsonObject().get("name").getAsString());
            builder.append("  ").append('\n');
        }
    }
    return builder.toString();
}